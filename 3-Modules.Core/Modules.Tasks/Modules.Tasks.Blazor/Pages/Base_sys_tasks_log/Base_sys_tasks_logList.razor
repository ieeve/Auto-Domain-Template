@page "/Task/Base_sys_tasks_log/Base_sys_tasks_logList"

@using Modules.Core.Blazor.Components
@using Modules.Tasks.Blazor.Pages.Base_sys_tasks_log.Components
@using Modules.Tasks.Shared.Base_sys_tasks_log
@inherits BasePage

<PageTitle>@PageTitleString @Modules.Core.Shared.AppConfig.GlobalConfig.SiteTitle</PageTitle>

<GridRow Align="RowAlign.Middle" Style="height:48px;">
    <GridCol Span="12">
        @if (TableDataModel.TableOptions.IsEdit)
        {
            <Button OnClick="@AddClick" Icon="@IconType.Outline.Plus" Type="ButtonType.Primary">@L["添加"]</Button>
        }
        <ObjectDataExportExcel ExportDataClick="ExportExcelClick"></ObjectDataExportExcel>
    </GridCol>

    <GridCol Span="12">
        <div class="Table_Right_Tool">
            <Badge Count="FilterCount"><Button Type="@ButtonType.Text" Size="@ButtonSize.Small" Icon="@IconType.Outline.Reload" OnClick="@ResetTable">@L["刷新"]</Button></Badge>
            @if (TableDataModel.TableOptions.IsEdit)
            {
                <Button Type="@ButtonType.Text" Size="@ButtonSize.Small" Icon="@IconType.Outline.Delete" OnClick="@BatchDelClick">@L["批量"]</Button>
                <Button Size="@ButtonSize.Small" Type="@ButtonType.Text" Icon="@IconType.Outline.Edit">@L["批量"]</Button>
            }
            <Button Type="@ButtonType.Text" Size="@ButtonSize.Small" Icon="@IconType.Outline.Setting" OnClick="@SettingTable">@L["设置"]</Button>
        </div>
    </GridCol>
</GridRow>
@if (!TableDataModel.IsValid())
{
    <div style="text-align: center; padding: 30px 50px;">
        <Spin />
    </div>
}
else
{
    <Table RowClassName="@(x => x.Data.Row_CSS_Class)"
           Resizable
           ScrollY="@TableScrollY" Bordered="true" Size=@TableSize.Small TItem="Base_sys_tasks_logVM"
           DataSource="TableDataModel.TableModel.DataSource"
           @bind-PageIndex="TableDataModel.TableModel.PageIndex"
           @bind-PageSize="TableDataModel.TableModel.PageSize"
           @bind-SelectedRows="TableDataModel.TableModel.SelectedRows"
           Total="TableDataModel.TableModel.TotalCount"
           Loading="TableDataModel.TableModel.Loading"
           OnChange="HandleTableChange" RemoteDataSource>
        <ChildContent>
            <Selection Type="SelectionType.Checkbox" />
            @if (TableDataModel.TableOptions.IsEdit)
            {
                <ActionColumn Title="@L["操作"]" Width="70">
                    <Space Size="@("1px")">
                        <SpaceItem>
                            <Button Size="@ButtonSize.Small" OnClick="()=>EditClick(context)" Type="@ButtonType.Link" Icon="@IconType.Outline.Edit" />
                        </SpaceItem>
                        <SpaceItem>
                            <Button Size="@ButtonSize.Small" OnClick="()=>DelClickAsync(context)" Type="@ButtonType.Link" Icon="@IconType.Outline.Delete" />
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            }
            @* //这里的T 是数据库实体，调整实体顺序，可以调整显示的顺序*@
            @foreach (var column in TableDataModel.ColumnHeaderModels)
            {
                @if (column.field.ToLower() == "log_time")
                {
                    <AntDesign.Column TData="object" DefaultSortOrder="@SortDirection.Descending" Hidden="@column.isHidden" OnHeaderCell="@(()=>(new Dictionary<string, object>() {{"style","background-color:" +@column.bgcolor+";" }}))" Width="@column.width.ToString()" Ellipsis="@TableDataModel.TableOptions.Ellipsis" Sortable DataIndex=@($"{column.field}")>
                        <TitleTemplate>
                            <div @onclick:stopPropagation="true">
                                <Input Placeholder="@column.title" AllowClear="true" @bind-Value="@column.search" OnChange="(e)=>OnInputClearChange(e,column.field)" TValue="string" />
                            </div>
                        </TitleTemplate>
                    </AntDesign.Column>
                }
                else
                {
                    <AntDesign.Column TData="object" Hidden="@column.isHidden" OnHeaderCell="@(()=>(new Dictionary<string, object>() {{"style","background-color:" +@column.bgcolor+";" }}))" Width="@column.width.ToString()" Ellipsis="@TableDataModel.TableOptions.Ellipsis" Sortable DataIndex=@($"{column.field}")>
                        <TitleTemplate>
                            <div @onclick:stopPropagation="true">
                                <Input Placeholder="@column.title" AllowClear="true" @bind-Value="@column.search" OnChange="(e)=>OnInputClearChange(e,column.field)" TValue="string" />
                            </div>
                        </TitleTemplate>
                        <CellRender Context="cell">
                            @if (column.field.ToLower() == "log_type")
                            {
                                @if (cell.FieldValue != null && cell.FieldValue?.ToString() == "Error")
                                {
                                    <Tag Color="TagColor.Red">@cell.FieldValue</Tag>
                                }
                                else
                                {
                                    <Tag Color="TagColor.Green">@cell.FieldValue</Tag>
                                }
                            }
                            else
                            {
                                @cell.FieldValue
                            }

                        </CellRender>
                    </AntDesign.Column>
                }
            }
        </ChildContent>
        <PaginationTemplate>
            <Pagination Style="text-align:center;line-height:38px;"
                        Total="context.Total"
                        Size="PaginationSize.Small"
                        ShowTotal=showTotal
                        PageSize="context.PageSize"
                        Current="context.PageIndex"
                        OnChange="context.HandlePageChange"
                        PageSizeOptions="TableDataModel.TableOptions.PageSizeOptions" />
        </PaginationTemplate>
    </Table>
}

<Modal Title="@Dialog.Title"
       @bind-Visible="@Dialog.Visible"
       Width="@Dialog.Width"
       Draggable="@Dialog.Draggable"
       DragInViewport="@Dialog.DragInViewport"
       Footer="null">
    <Base_sys_tasks_logAdd model="@EditRow" IsAdd="@IsAdd" OnValueCallback="OnValueCallback"></Base_sys_tasks_logAdd>
</Modal>
@*用户自定义列宽度*@
<Modules.Core.Blazor.Components.UserColumnSetting TableOptions="TableDataModel.TableOptions" ColumnHeaders="@TableDataModel.ColumnHeaderModels" UserColumnDrawerVisible="@userColumnDrawerVisible" OnValueCallback="@OnUserColumnDrawerCallback"></Modules.Core.Blazor.Components.UserColumnSetting>
@code
{
    Func<PaginationTotalContext, string> showTotal = ctx => $"总计 {ctx.Total} 项";
}